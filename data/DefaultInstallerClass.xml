<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Docker.IRISUPDATE">
<Description>
%Installer Manifest Docker.IRISUPDATE</Description>
<IncludeCode>%occInclude</IncludeCode>
<TimeCreated>64406,54997.841997</TimeCreated>

<XData name="IRISUPDATEManifest">
<Description>
Manifest Definition.</Description>
<XMLNamespace>INSTALLER</XMLNamespace>
<Data><![CDATA[
<Manifest>

<Namespace Name="%SYS" Create="no" >

<Invoke Class="Security.Users" Method="Import" CheckStatus="true">
<Arg Value="/tmp/irisupdate/UsersExport.xml"/>
</Invoke>

<Log Text="Creating ReadWrite IRISlib" Level="0"/>
<RunInstall Class="Docker.IRISUPDATE" Method="IRISlibReadWrite"/>

<Log Text="Modifying Security Settings" Level="0"/>
<RunInstall Class="Docker.IRISUPDATE" Method="ModifySecurity"/>

<Log Text="Importing Modified License Utils and Key Class" Level="0"/>
<Import File="/tmp/irisupdate/hide_license.xml" Flags="ck" Recurse="true">
</Import>

<Log Text="Creating ReadOnly IRISlib" Level="0"/>
<RunInstall Class="Docker.IRISUPDATE" Method="IRISlibReadOnly"/>

</Namespace>

</Manifest>
]]></Data>
</XData>

<Method name="setup">
<Description>
This is a method generator whose code is generated by XGL.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&pVars,pLogLevel:%Integer=3,pInstaller:%Installer.Installer,pLogger:%Installer.AbstractLogger]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #; Let our XGL document generate code for this method.
 Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "IRISUPDATEManifest")
]]></Implementation>
</Method>

<Method name="IRISlibReadWrite">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,pInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "Turn on Read/Write flag on IRISlib.", !
	set tSC = $$$OK
    try {
        new $Namespace
        set $Namespace = "%SYS"
        w $zu(1,"irislib",0,0,0,0,0,0,0,0,0,0,0,2)
    } catch e {

    }
    
    do $system.Status.DisplayError(tSC)
    quit tSC
]]></Implementation>
</Method>

<Method name="IRISlibReadOnly">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "Turn on ReadOnly flag on IRISlib.", !
	set tSC = $$$OK
    try {
        new $Namespace
        set $Namespace = "%SYS"
        w $zu(1,"irislib",0,0,0,0,0,0,0,0,0,0,0,1)
    } catch e {

    }
    
    do $system.Status.DisplayError(tSC)
    quit tSC
]]></Implementation>
</Method>

<Method name="ModifySecurity">
<Description>
Modify Security Settings and Login Rules</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
    try {
		new $Namespace
		set $Namespace="%SYS"
		set tRS=##class(%ResultSet).%New()
		set tSC=tRS.Prepare("UPDATE Security.Applications set timeout=0")
		set tSC=tRS.Execute()
		set tRS=##class(%ResultSet).%New()
		set tSC=tRS.Prepare("UPDATE Security.LoginRules set InvalidLoginLimit=0")
		set tSC=tRS.Execute()
		set tRS=##class(%ResultSet).%New()
		set tSC=tRS.Prepare("UPDATE Security.LoginRules set InactiveLimit=0")
		set tSC=tRS.Execute()
		set tRS=##class(%ResultSet).%New()
		set tSC=tRS.Prepare("UPDATE Security.Users set PasswordNeverExpires='1'")
		set tSC=tRS.Execute()
		set tRS=##class(%ResultSet).%New()
		set tSC=tRS.Prepare("UPDATE Security.Users set AccountNeverExpires='1'")
		set tSC=tRS.Execute()
    } catch e {

    }
    do $system.Status.DisplayError(tSC)
    quit tSC
]]></Implementation>
</Method>

</Class>
</Export>
